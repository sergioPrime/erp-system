erp-system/
│
├── config/
│   ├── db.js
│   └── logger.js
├── controllers/
│   ├── empresaController.js
│   └── licencaController.js
├── routes/
│   ├── empresaRoutes.js
│   └── licencaRoutes.js
├── scripts/
│   └── verificarLicencasExpiradas.js
├── tests/
│   ├── unit/
│   │   └── empresaController.test.js
│   └── integration/
│       └── empresaRoutes.test.js
├── .env
├── app.js
├── package.json
└── README.md

const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT,
});

module.exports = pool;

const winston = require('winston');
const expressWinston = require('express-winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' }),
  ],
});

module.exports = {
  logger,
  requestLogger: expressWinston.logger({
    winstonInstance: logger,
    meta: true,
    msg: 'HTTP {{req.method}} {{req.url}} {{res.statusCode}} {{res.responseTime}}ms',
  }),
  errorLogger: expressWinston.errorLogger({
    winstonInstance: logger,
  }),
};

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { requestLogger, errorLogger } = require('./config/logger');
const empresaRoutes = require('./routes/empresaRoutes');
const licencaRoutes = require('./routes/licencaRoutes');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());
app.use(cors());

// Logs
app.use(requestLogger);

// Rotas
app.use('/api/empresas', empresaRoutes);
app.use('/api/licencas', licencaRoutes);

// Tratamento de erros
app.use(errorLogger);

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});

const pool = require('../config/db');

// Listar todas as empresas
const listarEmpresas = async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM empresas');
    res.status(200).json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Erro ao listar empresas' });
  }
};

// Criar uma nova empresa
const criarEmpresa = async (req, res) => {
  const { nome, cnpj, endereco, telefone, email, status } = req.body;
  try {
    const result = await pool.query(
      'INSERT INTO empresas (nome, cnpj, endereco, telefone, email, status) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *',
      [nome, cnpj, endereco, telefone, email, status]
    );
    res.status(201).json(result.rows[0]);
  } catch (error) {
    res.status(500).json({ error: 'Erro ao criar empresa' });
  }
};

module.exports = { listarEmpresas, criarEmpresa };

const express = require('express');
const { listarEmpresas, criarEmpresa } = require('../controllers/empresaController');

const router = express.Router();

router.get('/', listarEmpresas);
router.post('/', criarEmpresa);

module.exports = router;

const nodemailer = require('nodemailer');
const pool = require('../config/db');

async function verificarLicencasExpiradas() {
  try {
    const result = await pool.query(
      "SELECT * FROM licencas WHERE status = 'ativa' AND data_expiracao < NOW()"
    );

    for (const licenca of result.rows) {
      // Suspender licença
      await pool.query(
        "UPDATE licencas SET status = 'expirada' WHERE id = $1",
        [licenca.id]
      );

      // Enviar e-mail de notificação
      const empresa = await pool.query(
        "SELECT email FROM empresas WHERE id = $1",
        [licenca.empresa_id]
      );
      const email = empresa.rows[0].email;
      await sendEmail(email, 'Sua licença expirou. Renove agora!');
    }
  } catch (error) {
    console.error('Erro ao verificar licenças expiradas:', error);
  }
}

async function sendEmail(to, message) {
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to,
    subject: 'Notificação de Licença Expirada',
    text: message,
  };

  await transporter.sendMail(mailOptions);
}

// Execute a verificação periodicamente
setInterval(verificarLicencasExpiradas, 60000); // A cada 1 minuto

